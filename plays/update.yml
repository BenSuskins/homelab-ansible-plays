---
- name: UPDATE - Update and upgrade host
  hosts: all
  become: true
  become_method: ansible.builtin.su
  vars_files:
    - ../vault.yml

  tasks:
    - name: UPDATE - Update packages
      ansible.builtin.apt:
        update_cache: true

    - name: UPDATE - Upgrade packages
      ansible.builtin.apt:
        upgrade: dist

    - name: UPDATE - Update firewall
      ansible.builtin.include_tasks:
        file: "../tasks/other/firewall.yml"
      when: firewall|bool

    - name: UPDATE - Gather Docker container facts
      ansible.builtin.command: docker ps -a --format '{% raw %}{{.Names}}{% endraw %}'
      register: docker_containers

    - name: UPDATE - Stop all running containers
      community.docker.docker_container:
        name: "{{ item }}"
        state: stopped
      loop: "{{ docker_containers.stdout_lines }}"

    - name: UPDATE - Update Core Docker Containers
      ansible.builtin.include_tasks:
        file: "../tasks/docker/{{ item }}.yml"
      loop: "{{ core_containers }}"

    - name: UPDATE - Update Docker Containers
      ansible.builtin.include_tasks:
        file: "../tasks/docker/{{ item }}.yml"
      loop: "{{ containers }}"

    - name: UPDATE - Remove stopped containers not wanted
      community.docker.docker_container:
        name: "{{ item }}"
        state: absent
      loop: "{{ docker_containers.stdout_lines }}"
      when: item not in (containers + core_containers)

    - name: Combine traefik entries from all hosts
      delegate_to: localhost
      set_fact:
        traefik_entries: >-
          {{
            traefik_entries | default([]) +
            (hostvars
              | dict2items
              | selectattr('value.homepage_entry', 'defined')
              | map(attribute='value.homepage_entry')
              | list
              | flatten)
          }}

    - name: UPDATE - Update Traefik
      when: ansible_hostname == 'development'
      ansible.builtin.include_tasks: "../tasks/docker/traefik.yml"

    - name: Combine homepage entries from all hosts
      delegate_to: localhost
      set_fact:
        all_services: >-
          {{
            all_services | default([]) +
            (hostvars
              | dict2items
              | selectattr('value.homepage_entry', 'defined')
              | map(attribute='value.homepage_entry')
              | list
              | flatten)
          }}

    - name: UPDATE - Update Homepage
      when: ansible_hostname == 'docker'
      ansible.builtin.include_tasks: "../tasks/docker/homepage.yml"

#    - name: SETUP - Reboot server
#      ansible.builtin.reboot:
#        msg: "Rebooting server after setup"
